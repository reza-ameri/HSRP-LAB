Scenario: Setting Up an Internal DNS Server for lab.local and Testing with Windows 7
In this scenario, I set up an internal DNS server to manage the domain lab.local. The goal was to allow internal network systems to communicate using domain names instead of IP addresses, making the internal network more efficient and manageable. Additionally, the DNS server also has access to the internet to resolve external domains as needed.

Installing Packages in Linux
To install packages in different Linux distributions, the appropriate package manager is used. Here are the methods for installing packages on various distributions:

1. Installing Packages on Debian/Ubuntu:
First, update the package lists:


sudo apt update
Then, install the desired package (e.g., BIND for setting up a DNS server):
sudo apt install bind9

2. Installing Packages on CentOS/RedHat:
Install the package using yum or dnf:
sudo yum install bind
or on newer versions:
sudo dnf install bind

1. named.conf Configuration:
This is the main configuration file for BIND9, where various settings related to the DNS server, zones, and how requests are handled are specified.

Zone Definitions:

zone "lab.local" IN {
      type master;
      file "/etc/bind/db.lab.local";
};

zone "mysitelocal.org" IN {
      type master;
      file "/etc/bind/db.mysitelocal.org";
};

zone "lab.local" IN { ... }: This section configures the lab.local domain. It specifies that the DNS server is the master for this domain, and it references the file /etc/bind/db.lab.local, which contains the DNS records for this domain.

zone "mysitelocal.org" IN { ... }: Similarly, this section configures the mysitelocal.org domain. It is also configured as the master, and the records for this domain are stored in the /etc/bind/db.mysitelocal.org file.

Explanation of Records in the Zone Files:
Each domain (lab.local and mysitelocal.org) has records defined in the corresponding zone files, such as /etc/bind/db.lab.local and /etc/bind/db.mysitelocal.org.

Zone File db.lab.local:

$TTL    604800
@       IN      SOA     lab.local. root.lab.local. (
                            6           ; Serial
                         604800         ; Refresh
                          86400         ; Retry
                        2419200         ; Expire
                         604800 )       ; Negative Cache TTL
;
@       IN      NS      bindserver.lab.local.
bindserver.lab.local.   IN      A       172.20.20.3
dhcp-server     IN      A       172.20.20.2
samba-server    IN      A       10.10.0.10
mailserver      IN      MX     10    10.10.0.1

SOA Record (Start of Authority): This record defines the authoritative information for the domain. It includes details like the version of the zone file, refresh times, and negative cache TTL.

lab.local.: The domain name.
root.lab.local.: The email address of the domain administrator.
Serial: The version number of the zone file, which should be incremented whenever the zone file is updated.
NS Record: The NS record specifies the authoritative DNS server for the lab.local domain. In this case, it is bindserver.lab.local..

A Records: These records map hostnames to IP addresses.

bindserver.lab.local. resolves to IP 172.20.20.3.
dhcp-server resolves to IP 172.20.20.2.
samba-server resolves to IP 10.10.0.10.
MX Record: The MX record specifies the mail server for the domain. Here, the mail server mailserver is located at 10.10.0.1 with a priority of 10.

Zone File db.mysitelocal.org:

$TTL    604800
@       IN      SOA     mysitelocal.org. root.mysitelocal.org. (
                           4            ; Serial
                         604800         ; Refresh
                          86400         ; Retry
                        2419200         ; Expire
                         604800 )       ; Negative Cache TTL
;
@       IN      NS      wb.mysitelocal.org.
wb      IN      A       172.20.20.4


Similar to the db.lab.local file, this file contains SOA, NS, and A records:
SOA Record: Provides authoritative information for the mysitelocal.org domain.
NS Record: Specifies the authoritative server for the mysitelocal.org domain, which is wb.mysitelocal.org..
A Record: Maps the wb hostname to the IP address 172.20.20.4

2. DNS Server Zone File Configuration:
In both configurations, the server is set up as the master for each domain. The zone files specify the DNS records for the respective domains, and the server uses these records to respond to DNS queries for those domains.

3. Key Points:
bindserver.lab.local. is the authoritative DNS server for both domains.
The DNS server is set up as the main resolver for hostname resolution for both domains within the internal network.
The A Records, MX Records, and NS Records allow internal systems and services to resolve names instead of IP addresses.



Steps Taken:
1️⃣ Setting up the DNS Server
I installed and configured BIND9 on a Linux server to act as the authoritative DNS server for the lab.local domain. This configuration allows internal devices to resolve names without relying on external DNS servers.

I configured the named.conf file to define the domain lab.local.
The server was set up to forward external DNS queries to public DNS servers (like Google's 8.8.8.8).

2️⃣ DNS Configuration in BIND
The BIND configuration was done in the named.conf.options file to control how the DNS server handles queries:


acl LAN {
    172.20.20.0/24;
    172.20.16.0/24;
};

options {
    directory "/var/cache/bind";  # Location for caching DNS responses
    max-cache-size 64m;
    max-cache-ttl 3600;
    
    dnssec-enable yes;  # Enables DNSSEC for response validation
    dnssec-validation auto;  # Enables automatic DNSSEC validation

    allow-query { localhost; LAN; };  # Restricting queries to internal network
    forwarders {
        8.8.8.8;  # Google Public DNS for external queries
    };
    allow-recursion { LAN; };  # Only allow internal network clients to query recursively

    auth-nxdomain no;  # Prevents returning NXDOMAIN for non-existent domains
    listen-on-v6 { LAN; };  # Listen for IPv6 queries on the internal network
};

Explanation:
DNSSEC: The dnssec-enable yes and dnssec-validation auto configurations ensure DNS responses are validated for authenticity.
Access Control: The allow-query { localhost; LAN; }; line restricts DNS queries to local and internal clients only.
Forwarding External Queries: The server forwards any external queries to Google’s DNS server (8.8.8.8) for resolution.
This setup allows internal devices to resolve internal domain names and also access external domains as required.


Example DHCP Configuration (ISC DHCP Server):

## VLAN 200 RANGE ##
subnet 172.20.16.0 netmask 255.255.255.224 {
 authoritative;
 option routers 172.20.60.1;
 option subnet-mask 255.255.255.224;
 option domain-name-servers 172.20.20.3;
 default-lease-time 86400;
 max-lease-time 86400;

 host pc-1 {
   hardware ethernet 00:50:79:66:68:24;
   fixed-address 172.20.16.15;
 }
 host win {
   hardware ethernet 50:f3:fc:00:27:01;
   fixed-address 172.20.16.16;
}


Testing with Windows 7 Client
To verify that the DNS server works as expected, I tested it using a Windows 7 client. I used the nslookup command to check if the DNS server resolves both internal and external domains:

nslookup dhcp-server.lab.local 
Server:		172.20.20.3
Address:	172.20.20.3#53

dhcp-server.lab.local 
172.20.20.2

Expected Result:
The correct IP address for example.lab.local should be returned, indicating that internal name resolution is working.

For external domains, such as google.com, I also tested:

nslookup google.com 

Address:	172.20.20.3
Address:	172.20.20.3#53

Non-authoritative answer:
Name:	google.com
Address: 216.58.206.78
Name:	google.com
Address: 2a00:1450:4001:81d::200e

This confirms that the server can forward external queries properly to the Google DNS server (8.8.8.8).

Firewall Configuration on Router
To enhance the security, I configured firewall rules on the router to restrict traffic:

Allow DNS traffic (Port 53) for clients to query the DNS server.
Allow HTTPS traffic (Port 443) for internet access.
Allow DHCP traffic for clients to receive IP addresses.
The firewall rules ensure that only necessary traffic is allowed while protecting the internal network.

Conclusion:
I set up an internal DNS server to handle lab.local domain resolutions on a Linux server.
The server can resolve both internal domain names and external domains.
The DHCP server automatically assigns the DNS server IP to clients.
DNSSEC was enabled to secure DNS responses.
Firewall rules on the router were configured to allow only necessary traffic (DNS, HTTPS, and DHCP).
